#
# Copyright (C) Red Gate Software Ltd 2010-2021
# Copyright 2022 The MigrateDB contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# JDBC url to use to connect to the database
# Examples
# --------
# Most drivers are included out of the box.
# * = JDBC driver must be downloaded and installed in /drivers manually
# ** = TNS_ADMIN environment variable must point to the directory of where tnsnames.ora resides
# Aurora MySQL      : jdbc:mysql://<instance>.<region>.rds.amazonaws.com:<port>/<database>?<key1>=<value1>&<key2>=<value2>...
# Aurora PostgreSQL : jdbc:postgresql://<instance>.<region>.rds.amazonaws.com:<port>/<database>?<key1>=<value1>&<key2>=<value2>...
# CockroachDB       : jdbc:postgresql://<host>:<port>/<database>?<key1>=<value1>&<key2>=<value2>...
# DB2*              : jdbc:db2://<host>:<port>/<database>
# Derby             : jdbc:derby:<subsubprotocol>:<database><;attribute=value>
# Firebird          : jdbc:firebirdsql://<host>[:<port>]/<database>?<key1>=<value1>&<key2>=<value2>...
# H2                : jdbc:h2:<file>
# HSQLDB            : jdbc:hsqldb:file:<file>
# Informix*         : jdbc:informix-sqli://<host>:<port>/<database>:informixserver=dev
# MariaDB           : jdbc:mariadb://<host>:<port>/<database>?<key1>=<value1>&<key2>=<value2>...
# MySQL             : jdbc:mysql://<host>:<port>/<database>?<key1>=<value1>&<key2>=<value2>...
# Oracle            : jdbc:oracle:thin:@//<host>:<port>/<service>
# Oracle (TNS)**    : jdbc:oracle:thin:@<tns_entry>
# PostgreSQL        : jdbc:postgresql://<host>:<port>/<database>?<key1>=<value1>&<key2>=<value2>...
# SAP HANA*         : jdbc:sap://<host>:<port>/?databaseName=<database>
# Snowflake*        : jdbc:snowflake://<account>.snowflakecomputing.com/?db=<database>&warehouse=<warehouse>&role=<role>...
# SQL Server        : jdbc:sqlserver://<host>:<port>;databaseName=<database>
# SQLite            : jdbc:sqlite:<database>
# Sybase ASE        : jdbc:jtds:sybase://<host>:<port>/<database>
# Redshift*         : jdbc:redshift://<host>:<port>/<database>
# migratedb.url=

# Fully qualified classname of the JDBC driver (autodetected by default based on migratedb.url)
# migratedb.driver=

# User to use to connect to the database. MigrateDb will prompt you to enter it if not specified, and if the JDBC
# connection is not using a password-less method of authentication.
# migratedb.user=

# Password to use to connect to the database. MigrateDb will prompt you to enter it if not specified, and if the JDBC
# connection is not using a password-less method of authentication.
# migratedb.password=

# The maximum number of retries when attempting to connect to the database. After each failed attempt,
# MigrateDb will wait 1 second before attempting to connect again, up to the maximum number of times specified
# by connectRetries. The interval between retries doubles with each subsequent attempt.
# (default: 0)
# migratedb.connectRetries=

# The maximum time between retries when attempting to connect to the database in seconds.
# This will cap the interval between connect retry to the value provided. (default: 120)
# migratedb.connectRetriesInterval=

# The SQL statements to run to initialize a new database connection immediately after opening it. (default: none)
# migratedb.initSql=

# The default schema managed by MigrateDb. This schema name is case-sensitive. If not specified, but
# <i>migratedb.schemas</i> is, MigrateDb uses the first schema
# in that list. If that is also not specified, MigrateDb uses the default schema for the database connection.
# Consequences:
# - This schema will be the one containing the schema history table.
# - This schema will be the default for the database connection (provided the database supports this concept).
# migratedb.defaultSchema=

# Comma-separated list of schemas managed by MigrateDb. These schema names are case-sensitive. If not specified, MigrateDb uses
# the default schema for the database connection. If <i>migratedb.defaultSchema</i> is not specified, then the first of
# this list also acts as default schema.
# Consequences:
# - MigrateDb will automatically attempt to create all these schemas, unless they already exist.
# - The schemas will be cleaned in the order of this list.
# - If MigrateDb created them, the schemas themselves will be dropped when cleaning.
# migratedb.schemas=

# Whether MigrateDb should attempt to create the schemas specified in the schemas property
# migratedb.createSchemas=

# Name of MigrateDB's schema history table (default: migratedb_state)
# By default (single-schema mode) the schema history table is placed in the default schema for the connection
# provided by the datasource.
# When the migratedb.schemas property is set (multi-schema mode), the schema history table is placed in the first
# schema of the list.
# migratedb.table=

# The tablespace where to create the schema history table that will be used by MigrateDb. If not specified, MigrateDb uses
# the default tablespace for the database connection.
# This setting is only relevant for databases that do support the notion of tablespaces. Its value is simply
# ignored for all others.
# migratedb.tablespace=

# Comma-separated list of locations to scan recursively for migrations. (default: filesystem:<<INSTALL-DIR>>/sql)
# The location type is determined by its prefix.
# Unprefixed locations or locations starting with classpath: point to a package on the classpath and may contain
# both SQL and Java-based migrations.
#
# Locations starting with filesystem: point to a directory on the filesystem, may only
# contain SQL migrations and are only scanned recursively down non-hidden directories.
migratedb.locations=filesystem:sql

# Whether to fail if a location specified in the migratedb.locations option doesn't exist (default: false)
# migratedb.failOnMissingLocations=

# The loggers MigrateDb should use. Valid options are:
#
# auto: Auto detect the logger (default behavior)
# console: Use stdout/stderr (only available when using the CLI)
# slf4j: Use the slf4j logger
# apache-commons: Use the Apache Commons logger
#
# Alternatively you can provide the fully qualified class name for any other logger to use that.
# migratedb.loggers=

# Comma-separated list of fully qualified class names of custom MigrationResolver to use for resolving migrations.
# migratedb.resolvers=

# If set to true, default built-in resolvers (jdbc, spring-jdbc and sql) are skipped and only custom resolvers as
# defined by 'migratedb.resolvers' are used. (default: false)
# migratedb.skipDefaultResolvers=

# Comma-separated list of directories containing JDBC drivers and Java-based migrations. (default: <INSTALL-DIR>/jars)
# migratedb.jarDirs=

# File name prefix for versioned SQL migrations (default: V)
# Versioned SQL migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix,
# which using the defaults translates to V1_1__My_description.sql
# migratedb.sqlMigrationPrefix=

# File name prefix for repeatable SQL migrations (default: R)
# Repeatable SQL migrations have the following file name structure: prefixSeparatorDESCRIPTIONsuffix,
# which using the defaults translates to R__My_description.sql
# migratedb.repeatableSqlMigrationPrefix=

# File name separator for SQL migrations (default: __)
# SQL migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix,
# which using the defaults translates to V1_1__My_description.sql
# migratedb.sqlMigrationSeparator=

# Comma-separated list of file name suffixes for SQL migrations. (default: .sql)
# SQL migrations have the following file name structure: prefixVERSIONseparatorDESCRIPTIONsuffix,
# which using the defaults translates to V1_1__My_description.sql
# Multiple suffixes (like .sql,.pkg,.pkb) can be specified for easier compatibility with other tools such as
# editors with specific file associations.
# migratedb.sqlMigrationSuffixes=

# Encoding of SQL migrations (default: UTF-8). Caution: changing the encoding after migrations have been run
# will invalidate the calculated checksums and require a `migratedb repair`.
# migratedb.encoding=

# Whether placeholders should be replaced. (default: true)
# migratedb.placeholderReplacement=

# Placeholders to replace in SQL migrations.
# migratedb.placeholders.user=
# migratedb.placeholders.my_other_placeholder=

# Prefix of every placeholder. (default: ${ )
# migratedb.placeholderPrefix=

# Suffix of every placeholder. (default: } )
# migratedb.placeholderSuffix=

# Prefix of every script placeholder. (default: FP__ )
# migratedb.scriptPlaceholderPrefix=

# Suffix of every script placeholder. (default: __ )
# migratedb.scriptPlaceholderSuffix=

# Target version up to which MigrateDb should consider migrations.
# Defaults to 'latest'
# Special values:
# - 'current': designates the current version of the schema
# - 'latest': the latest version of the schema, as defined by the migration with the highest version
# - 'next': the next version of the schema, as defined by the first pending migration
# - '<version>?' (end with a '?'): Instructs MigrateDb not to fail if the target version doesn't exist.
#                                  In this case, MigrateDb will go up to but not beyond the specified target
#                                  (default: fail if the target version doesn't exist)
# migratedb.target=

# Whether to automatically call validate or not when running migrate. (default: true)
# migratedb.validateOnMigrate=

# Whether to automatically call clean or not when a validation error occurs. (default: false)
# This is exclusively intended as a convenience for development. even though we
# strongly recommend not to change migration scripts once they have been checked into SCM and run, this provides a
# way of dealing with this case in a smooth manner. The database will be wiped clean automatically, ensuring that
# the next migration will bring you back to the state checked into SCM.
# Warning! Do not enable in production!
# migratedb.cleanOnValidationError=

# Whether to disable clean. (default: false)
# This is especially useful for production environments where running clean can be quite a career limiting move.
# migratedb.cleanDisabled=

# The version to tag an existing schema with when executing baseline. (default: 1)
# migratedb.baselineVersion=

# The description to tag an existing schema with when executing baseline. (default: << MigrateDb Baseline >>)
# migratedb.baselineDescription=

# Whether to automatically call baseline when migrate is executed against a non-empty schema with no schema history
# table. This schema will then be initialized with the baselineVersion before executing the migrations.
# Only migrations above baselineVersion will then be applied.
# This is useful for initial MigrateDb production deployments on projects with an existing DB.
# Be careful when enabling this as it removes the safety net that ensures
# MigrateDb does not migrate the wrong database in case of a configuration mistake! (default: false)
# migratedb.baselineOnMigrate=

# Allows migrations to be run "out of order" (default: false).
# If you already have versions 1 and 3 applied, and now a version 2 is found,
# it will be applied too instead of being ignored.
# migratedb.outOfOrder=

# This allows you to tie in custom code and logic to the MigrateDb lifecycle notifications (default: empty).
# Set this to a comma-separated list of fully qualified class names of migratedb.core.api.callback.Callback
# implementations.
# migratedb.callbacks=

# If set to true, default built-in callbacks (SQL) are skipped and only custom callback as
# defined by 'migratedb.callbacks' are used. (default: false)
# migratedb.skipDefaultCallbacks=

# Ignore missing migrations when reading the schema history table. These are migrations that were performed by an
# older deployment of the application that are no longer available in this version. For example: we have migrations
# available on the classpath with versions 1.0 and 3.0. The schema history table indicates that a migration with
# version 2.0 (unknown to us) has also been applied. Instead of bombing out (fail fast) with an exception, a
# warning is logged and MigrateDb continues normally. This is useful for situations where one must be able to deploy
# a newer version of the application even though it doesn't contain migrations included with an older one anymore.
# Note that if the most recently applied migration is removed, MigrateDb has no way to know it is missing and will
# mark it as future instead.
# true to continue normally and log a warning, false to fail fast with an exception. (default: false)
# migratedb.ignoreMissingMigrations=

# Ignore ignored migrations when reading the schema history table. These are migrations that were added in between
# already migrated migrations in this version. For example: we have migrations available on the classpath with
# versions from 1.0 to 3.0. The schema history table indicates that version 1 was finished on 1.0.15, and the next
# one was 2.0.0. But with the next release a new migration was added to version 1: 1.0.16. Such scenario is ignored
# by migrate command, but by default is rejected by validate. When ignoreIgnoredMigrations is enabled, such case
# will not be reported by validate command. This is useful for situations where one must be able to deliver
# complete set of migrations in a delivery package for multiple versions of the product, and allows for further
# development of older versions.
# true to continue normally, false to fail fast with an exception. (default: false)
# migratedb.ignoreIgnoredMigrations=

# Ignore pending migrations when reading the schema history table. These are migrations that are available
# but have not yet been applied. This can be useful for verifying that in-development migration changes
# don't contain any validation-breaking changes of migrations that have already been applied to a production
# environment, e.g. as part of a CI/CD process, without failing because of the existence of new migration versions.
# (default: false)
# migratedb.ignorePendingMigrations=

# Ignore future migrations when reading the schema history table. These are migrations that were performed by a
# newer deployment of the application that are not yet available in this version. For example: we have migrations
# available on the classpath up to version 3.0. The schema history table indicates that a migration to version 4.0
# (unknown to us) has already been applied. Instead of bombing out (fail fast) with an exception, a
# warning is logged and MigrateDb continues normally. This is useful for situations where one must be able to redeploy
# an older version of the application after the database has been migrated by a newer one.
# true to continue normally and log a warning, false to fail fast with an exception. (default: true)
# migratedb.ignoreFutureMigrations=

# Ignore migrations that match this comma-separated list of patterns when validating migrations.
# Each pattern is of the form <migration_type>:<migration_state>
# See https://daniel-huss.github.io/migratedb/documentation/configuration/parameters/ignoreMigrationPatterns for full details
# Example: repeatable:missing,versioned:pending,*:failed
# migratedb.ignoreMigrationPatterns=

# Whether to validate migrations and callbacks whose scripts do not obey the correct naming convention. A failure can be
# useful to check that errors such as case sensitivity in migration prefixes have been corrected.
# false to continue normally, true to fail fast with an exception (default: false)
# migratedb.validateMigrationNaming=

# Whether to allow mixing transactional and non-transactional statements within the same migration.
# MigrateDb attempts to run each migration within its own transaction
# If MigrateDb detects that a specific statement cannot be run within a transaction, it won’t run that migration within a transaction
# This option toggles whether transactional and non-transactional statements can be mixed within a migration run.
# Enabling this means for 'mixed' migrations, the entire script will be run without a transaction
# Note that this is only applicable for PostgreSQL, Aurora PostgreSQL, SQL Server and SQLite which all have
# statements that do not run at all within a transaction.
# This is not to be confused with implicit transaction, as they occur in MySQL or Oracle, where even though a
# DDL statement was run within within a transaction, the database will issue an implicit commit before and after
# its execution.
# true if mixed migrations should be allowed. false if an error should be thrown instead. (default: false)
# migratedb.mixed=

# Whether to group all pending migrations together in the same transaction when applying them
# (only recommended for databases with support for DDL transactions).
# true if migrations should be grouped. false if they should be applied individually instead. (default: false)
# migratedb.group=

# The username that will be recorded in the schema history table as having applied the migration.
# <<blank>> for the current database user of the connection. (default: <<blank>>).
# migratedb.installedBy=

# When attempting to get a lock for migrating, the number of attempts (at 1 second intervals) to make before
# abandoning the migration. Specify -1 to try indefinitely. (default: 50)
# migratedb.lockRetryCount=

# Whether MigrateDB's support for Oracle SQL*Plus commands should be activated. (default: false)
# migratedb.oracle.sqlplus=

# Whether MigrateDb should issue a warning instead of an error whenever it encounters an Oracle SQL*Plus
# statement it doesn't yet support. (default: false)
# migratedb.oracle.sqlplusWarn=

# Name of the old table which is converted into the format used by MigrateDB by the "liberate" command.
# migratedb.oldTable=
