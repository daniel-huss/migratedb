plugins {
    id 'java-gradle-plugin'
    id 'groovy'
    id 'com.gradle.plugin-publish' version '0.20.0'
    id 'maven-publish'
    id 'jacoco'
}

apply plugin: BuildHelper

group 'de.unentscheidbar'
version versionFromMavenProject()

String scannerArtifact = "de.unentscheidbar:migratedb-scanner:${project.version}"

repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()
}

gradlePlugin {
    plugins {
        migratedbPlugin {
            id = 'de.unentscheidbar.migratedb'
            displayName = 'MigrateDB Plugin'
            description = 'Performs build-time class path scanning.'
            implementationClass = 'migratedb.gradle.MigrateDbPlugin'
        }
    }
}

pluginBundle {
    website = 'https://unentscheidbar.de/gitea/hussdl/migratedb'
    vcsUrl = 'https://unentscheidbar.de/gitea/hussdl/migratedb'
}

publishing {
    repositories {
        maven {
            name = 'localPluginRepository'
            url = 'build/local-plugin-repository'
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

jacoco {
    toolVersion = "0.8.7"
}

dependencies {
    runtimeOnly gradleApi()
    implementation scannerArtifact
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

tasks.withType(AbstractArchiveTask) {
    // Reproducible builds, please
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}


tasks.withType(Test).configureEach {
    onlyIf {
        (!Boolean.valueOf(System.getProperty("skipTests", "false")))
    }
    useJUnitPlatform()
    jacoco {
        destinationFile = layout.projectDirectory.dir("..").dir("target").file("jacoco.exec").getAsFile()
    }
}

class BuildHelper implements Plugin<Project> {
    @Override
    void apply(Project project) {
        project.extensions.add("versionFromMavenProject", {
            // IDE doesn't know groovy-xml is on class path, so we instantiate via reflection to get rid of
            // an ugly error message.
            ("groovy.xml.XmlSlurper" as Class).getConstructor().newInstance()
                    .parse(new File(project.projectDir, '../pom.xml'))
                    .parent
                    .version
                    .text()
        })
    }
}
